Exam generation library. See ../exam-expl/ for examples of usage of
this library.

Writing a new exam
==================

As a user, you have to define an "exam subject", that is a script,
generating the set of questions for your exam. For example,
../exam-expl/demo-exam-ensimag2011-en.sh is an "exam subject". For
explanations on how to write an exam subject, see
../exam-expl/exam-test.sh and the comments it contains.

Run your exam subject script with --help to see the available options.

It is advised to test the exam in "demo mode", i.e. using the --demo
option first.

Demo and SQL modes: big picture
===============================

In demo mode, no database is used:

* Questions and expected answers are encoded directly in PHP,

* Actual answers are memorized in cookies.

In SQL mode, the global picture is:

* The exam subject is a script (which uses the generation library),
  which generates:

  - php/subjects/1/ and php/subjects/2/, containing the content of
    accounts for students. At Ensimag, we have a system to deploy it
    automatically on students machines. You may distribute this to
    students with any system.

    In addition, the subject archives are also available through the
    web interface (so, regardless of the initial distribution
    mechanism, the student may re-download the archive during the
    exam). The download is only possible from the machine
    associated to the tarball (i.e. students can't download the
    tarball of their friends).

  - php/ containing PHP code to put on the web server.

  - init-db.sql and init-db-drop-tables.sql, SQL scripts that
    initializes the database (as the names suggest, the second drops
    possibly existing tables to restart with fresh and empty ones).

  - questions.sql, to be executed with e.g. mysql, to fill-in the
    database with questions and expected answers.

  - hard-reset-db.sh, a trivial shell script that runs
    init-db-drop-tables.sql and questions.sql (brutal way to create a
    database with questions.sql imported, and only this).

  (the script will remind you this at the end of execution)

* If needed, you may run ./init-db.sh manually to generate an SQL
  script to initialize a database. Run the SQL script with e.g. mysql
  (or a web interface like phpMyAdmin) to initialize the database on
  the server.

The user API is implemented and documented in ./exam-api.sh. Reading
./exam-lib.sh may help too.

Some domain-specific helper functions are provided in:

* python-lib.sh to generate Python pieces of code.

* ../treasure-hunt/*lib.sh for obfuscation libraries used in the
  treasure hunt, usable in the exam too.

During the exam
===============

Monitoring
----------

It is advised to monitor the server during the exam using:

* tail -f /var/log/apache2/access.log => shows whether students are
  working.

* tail -f /var/log/apache2/error.log => should ideally remain empty.

* Open the URL of php/private/stats.php in a web browser, and refresh
  periodically.

* Any other monitoring utility can help if you're a bit paranoid
  ("vmstat 1", "top", ...), to check that your server isn't
  overloaded (mine is a small virtual machine).

In case anything goes wrong, it's better to have backups ... See
utils/gradesdump.sh and utils/examdump.sh. Launch them before the exam
starts, they will back up the grades listing and the database every 10
minutes.

Changing session
----------------

The exam starts in session 1. If you need two sessions (e.g. have N
students, but a room with only N/2 computers), you have to change the
session number manually in config.php ($session) between sessions. It
is not possible to have session overlap (i.e. you are either in
session 1 or session 2, but can't have a room in session 1 and another
already starting session 2).

If a computer is down ...
-------------------------

There's no easy way to change the association students <-> machine
during the exam. The recommended solution is to allocate a few
machines as "spare machines" by adding a few lines in the students CSV
list, like:

spare1;Spare Machine room XYZ;No 1;1;host42.school.com
spare2;Spare Machine room XYZ;No 2;1;host43.school.com
spare3;Spare Machine room XYZ;No 3;2;host42.school.com
spare4;Spare Machine room XYZ;No 4;2;host43.school.com

(two spare machines for room XYZ, for sessions 1 and 2)

If a student need to move to one of these machines, note who uses
which machine, and adapt the grades listing after the fact (in a
spreadsheet program).

Alternatively, install phpmyadmin on the server, and change the
login/first name/last name associated to the spare machine (for the
corresponding session and subject) in the table exam_unix_logins.
